# Immuni CircleCI continuous integration configuration.
version: 2.1

# Custom commands
commands:
  build:
    description: Perform a build of the Immuni Android application.
    steps:
      - run:
          name: "[build] Compile and archive"
          command: fastlane build target:$BUILD_KIND
      - store_artifacts:
          path: app/build/outputs/

  check_release:
    description: Check whether the commit should trigger a build or not.
    steps:
      - run:
          name: "[check] Identify release kind"
          command: |
            # Verify if it's a release commit
            GIT_MESSAGE=$(git log --pretty=%s | head -1 || true)

            if [[ ! $GIT_MESSAGE == *"#build"* ]]; then
              echo "Not a release commit. Stopping the execution of the build job."
              circleci-agent step halt
            fi

            # Check the build kind from the git message. The git message must contain either:
            # "#build-release" or "#build-development", depending on the kind of release.
            BUILD_KIND="$(echo $GIT_MESSAGE | sed -E 's/^.*#build-(release|development).*$/\1/')"

            if [[ -z "${BUILD_KIND}" ]]; then
                echo "Unrecognized build kind; valid types are: release, development."
                circleci-agent step halt
            fi

            # Make it available for the rest of the pipeline
            echo "export BUILD_KIND=$BUILD_KIND" >> $BASH_ENV

  fetch_config:
    description: Fetch configuration files necessary to perform builds.
    steps:
      - run:
          name: "[fetch_config] Setup custom environment variables"
          command: |
            echo $GOOGLE_SERVICES_JSON | base64 --decode > app/google-services.json
            echo $KEYSTORE | base64 --decode > immuni-android.keystore

  install_android_dependencies:
    description: Install Android dependencies.
    steps:
      - restore_cache:
          name: "[dependencies] Restore the cache"
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: "[dependencies] Installing dependencies"
          command: ./gradlew androidDependencies
      - save_cache:
          name: "[dependencies] Save the cache"
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
          paths:
            - ~/.gradle

  setup_pr_tools:
    description: Configure the pull requests environment.
    steps:
      - run:
          name: "[pr_setup] Install ktlint"
          command: |
            # Get binaries from official repository
            curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.36.0/ktlint && chmod a+x ktlint

            # Verify PGP signature
            curl -sS https://keybase.io/pinterestandroid/pgp_keys.asc | sudo gpg --import
            curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.36.0/ktlint.asc
            sudo gpg --verify ktlint.asc

            # Install globally
            sudo mv ktlint /usr/local/bin/
      - run:
          name: "[pr_setup] Install danger"
          command: yarn install --dev

  setup_ci:
    description: Configure the CI environment.
    steps:
      - run:
          name: "[ci_setup] Configure ruby"
          command: |
            echo "export PATH=${HOME}/.rubies/ruby-2.6.1/bin:${PATH}" >> $BASH_ENV
            ruby -v
      - restore_cache:
          name: "[ci_setup] Restore the ruby dependencies cache"
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: "[ci_setup] Install ruby dependencies"
          command: bundle install
      - save_cache:
          name: "[ci_setup] Save the ruby dependencies cache"
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/.gem

executors:
  default:
    docker:
      - image: circleci/android:api-29-node
    environment:
      JVM_OPTS: -Xmx3200m

jobs:
  build:
    working_directory: ~/code
    executor: default
    resource_class: large
    steps:
      - checkout:
          name: "[build] Checkout the code"
      - check_release
      - setup_ci
      - fetch_config
      - install_android_dependencies
      - build
  pr_check:
    working_directory: ~/code
    executor: default
    steps:
      - run:
          name: "[pr_check] Stop job if no PR open"
          command: |
            if [[ -z "${CIRCLE_PULL_REQUEST}" ]]; then
                circleci-agent step halt
            fi
      - checkout:
          name: "[pr_check] Checkout the code"
      - setup_pr_tools
      - fetch_config
      - install_android_dependencies
      - run:
          name: "[pr_check] Run danger"
          command: |
            # Use the same GitHub token that is used to publish releases

            export DANGER_GITHUB_API_TOKEN=$GITHUB_TOKEN
            [ -z "${DANGER_GITHUB_API_TOKEN}" ] || yarn danger ci
  unit_tests:
    working_directory: ~/code
    executor: default
    steps:
      - checkout:
          name: "[unit_tests] Checkout the code"
      - fetch_config
      - install_android_dependencies
      - run:
          name: "[unit_tests] Run App Module Unit Tests"
          command: ./gradlew :app:testDebugUnitTest
      - store_artifacts:
          path: app/build/reports
      - store_test_results:
          path: app/build/test-results
      - run:
          name: "[unit_tests] Run Network Module Unit Tests"
          command: ./gradlew :network:testDebugUnitTest
      - store_artifacts:
          path: network/build/reports
      - store_test_results:
          path: network/build/test-results
      - run:
          name: "[unit_tests] Run Extensions Module Unit Tests"
          command: ./gradlew :extensions:testDebugUnitTest
      - store_artifacts:
          path: extensions/build/reports
      - store_test_results:
          path: extensions/build/test-results

workflows:
  version: 2
  build:
    jobs:
      - build
  pr_check:
    jobs:
      - pr_check
  tests:
    jobs:
      - unit_tests